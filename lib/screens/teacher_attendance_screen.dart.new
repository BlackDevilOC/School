import 'package:flutter/material.dart';
import '../models/teacher.dart';
import '../models/teacher_attendance.dart';
import '../services/database_service.dart';
import 'package:uuid/uuid.dart';

class TeacherAttendanceScreen extends StatefulWidget {
  const TeacherAttendanceScreen({super.key});

  @override
  State<TeacherAttendanceScreen> createState() => _TeacherAttendanceScreenState();
}

class _TeacherAttendanceScreenState extends State<TeacherAttendanceScreen> {
  final DatabaseService _databaseService = DatabaseService();
  final Uuid _uuid = const Uuid();
  List<Teacher> _teachers = [];
  List<TeacherAttendance> _attendanceRecords = [];
  DateTime _selectedDate = DateTime.now();
  bool _isLoading = true;
  bool _isLoadingAttendance = false;
  bool _hasChanges = false;

  // Define attendance status options and their colors
  final Map<String, Color> _statusColors = {
    'Present': Colors.green,
    'Absent': Colors.red,
    'Excused': Colors.blue, // For leave
    'Late': Colors.orange,
  };

  @override
  void initState() {
    super.initState();
    _loadData();
  }
  
  Future<void> _loadData() async {
    setState(() => _isLoading = true);
    try {
      // Load teachers from Supabase
      await _loadTeachers();

      // Load attendance records for the selected date
      await _loadAttendanceForDate();

      setState(() => _isLoading = false);
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading data: $e')),
      );
    }
  }

  Future<void> _loadTeachers() async {
    try {
      final teachers = await _databaseService.getTeachers();
      setState(() {
        _teachers = teachers;
      });
      print('Loaded ${teachers.length} teachers from Supabase');
    } catch (e) {
      print('Error loading teachers: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading teachers: $e')),
      );
      rethrow;
    }
  }

  Future<void> _loadAttendanceForDate() async {
    setState(() => _isLoadingAttendance = true);
    try {
      final attendance =
          await _databaseService.getTeacherAttendanceForDate(_selectedDate);
      setState(() {
        _attendanceRecords = attendance;
        _isLoadingAttendance = false;
      });
      print(
          'Loaded ${attendance.length} attendance records for ${_selectedDate.toIso8601String().split('T')[0]}');
    } catch (e) {
      setState(() => _isLoadingAttendance = false);
      print('Error loading attendance: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading attendance records: $e')),
      );
      rethrow;
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2023),
      lastDate: DateTime(2025),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
      // Reload attendance for the new date
      await _loadAttendanceForDate();
    }
  }

  Future<void> _updateAttendanceStatus(Teacher teacher, String newStatus) async {
    try {
      // Check if there's an existing attendance record for this teacher on this date
      final existingRecord = _attendanceRecords.where(
        (record) => record.teacherId == teacher.id && 
                    record.attendanceDate.year == _selectedDate.year &&
                    record.attendanceDate.month == _selectedDate.month &&
                    record.attendanceDate.day == _selectedDate.day
      ).toList();

      if (existingRecord.isNotEmpty) {
        // Update existing record
        final updatedAttendance = TeacherAttendance(
          id: existingRecord.first.id,
          teacherId: teacher.id,
          attendanceDate: _selectedDate,
          status: newStatus,
          createdAt: existingRecord.first.createdAt,
          updatedAt: DateTime.now(),
        );

        await _databaseService.updateTeacherAttendance(updatedAttendance);
      } else {
        // Create new record
        final newAttendance = TeacherAttendance(
          id: _uuid.v4(),
          teacherId: teacher.id,
          attendanceDate: _selectedDate,
          status: newStatus,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );

        await _databaseService.addTeacherAttendance(newAttendance);
      }

      // Reload attendance records
      await _loadAttendanceForDate();
      setState(() => _hasChanges = true);

      // Show a subtle indicator that the change was saved
      ScaffoldMessenger.of(context).clearSnackBars();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '${teacher.name}\'s attendance marked as $newStatus',
          ),
          duration: const Duration(seconds: 1),
          behavior: SnackBarBehavior.floating,
          backgroundColor: _getStatusColor(newStatus),
        ),
      );
    } catch (e) {
      print('Error updating attendance: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating attendance: $e')),
      );
    }
  }
  
  Color _getStatusColor(String status) {
    return _statusColors[status] ?? Colors.grey;
  }
  
  String _getAttendanceStatus(String teacherId) {
    final record = _attendanceRecords.where(
      (record) => record.teacherId == teacherId && 
                  record.attendanceDate.year == _selectedDate.year &&
                  record.attendanceDate.month == _selectedDate.month &&
                  record.attendanceDate.day == _selectedDate.day
    ).toList();
    
    return record.isNotEmpty ? record.first.status : 'Absent'; // Default to absent if no record
  }
  
  Widget _getStatusIndicator(String status) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: 12,
        vertical: 6,
      ),
      decoration: BoxDecoration(
        color: _getStatusColor(status).withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: _getStatusColor(status).withOpacity(0.5),
        ),
      ),
      child: Text(
        status[0], // First letter of status
        style: TextStyle(
          color: _getStatusColor(status),
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
  
  void _showStatusSelectionDialog(Teacher teacher) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Update ${teacher.name}\'s Attendance'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: _statusColors.keys.map((status) => 
            ListTile(
              leading: CircleAvatar(
                backgroundColor: _getStatusColor(status),
                child: Text(
                  status[0],
                  style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                ),
              ),
              title: Text(status),
              onTap: () {
                Navigator.pop(context);
                _updateAttendanceStatus(teacher, status);
              },
            )
          ).toList(),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Teacher Attendance'),
        actions: [
          IconButton(
            icon: const Icon(Icons.calendar_today),
            onPressed: () => _selectDate(context),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                // Date display
                Container(
                  padding: const EdgeInsets.all(16),
                  color: Theme.of(context).colorScheme.surfaceVariant,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Date: ${_selectedDate.day}/${_selectedDate.month}/${_selectedDate.year}',
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      ElevatedButton.icon(
                        icon: const Icon(Icons.calendar_month),
                        label: const Text('Change Date'),
                        onPressed: () => _selectDate(context),
                      ),
                    ],
                  ),
                ),
                // Status legend
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: _statusColors.entries.map((entry) {
                      return Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 4.0),
                        child: Chip(
                          label: Text(entry.key[0]),
                          backgroundColor: entry.value.withOpacity(0.2),
                          side: BorderSide(color: entry.value),
                          labelStyle: TextStyle(color: entry.value),
                        ),
                      );
                    }).toList(),
                  ),
                ),
                // Teacher list
                _isLoadingAttendance
                    ? const Padding(
                        padding: EdgeInsets.all(16.0),
                        child: CircularProgressIndicator(),
                      )
                    : Expanded(
                        child: _teachers.isEmpty
                            ? const Center(child: Text('No teachers found'))
                            : ListView.builder(
                                itemCount: _teachers.length,
                                itemBuilder: (context, index) {
                                  final teacher = _teachers[index];
                                  final status = _getAttendanceStatus(teacher.id);

                                  return Card(
                                    margin: const EdgeInsets.symmetric(
                                      horizontal: 16,
                                      vertical: 8,
                                    ),
                                    child: ListTile(
                                      leading: CircleAvatar(
                                        backgroundColor: _getStatusColor(status).withOpacity(0.2),
                                        child: Text(
                                          teacher.name[0],
                                          style: TextStyle(
                                            color: _getStatusColor(status),
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                      title: Text(teacher.name),
                                      subtitle: Text(teacher.subject),
                                      trailing: Row(
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          _getStatusIndicator(status),
                                          const SizedBox(width: 8),
                                          IconButton(
                                            icon: const Icon(Icons.edit),
                                            onPressed: () => _showStatusSelectionDialog(teacher),
                                          ),
                                        ],
                                      ),
                                      onTap: () => _showStatusSelectionDialog(teacher),
                                    ),
                                  );
                                },
                              ),
                      ),
              ],
            ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: _loadAttendanceForDate,
        icon: const Icon(Icons.refresh),
        label: const Text('Refresh'),
      ),
    );
  }
}
